guides(fill = guide_legend(title = "Genes present in bin", override.aes = list(size = 10)),
size = FALSE) +
# size = guide_legend(title = "Mapped assembled reads (%)")) +
xlab("Sample") +
scale_size_continuous(range = c(3,40), breaks = c(5, 10, 20, 40, 60)) +
ylab("Genome bin")
print(combined_bins_plot)
combined_bins_plot <- ggplot(stats_table_combined, aes_string(x = "metagenome", y = "plotting_name")) +
# geom_bar(aes_string(weight = plot_y_axis, fill = taxonomic_rank)) +
geom_point(aes_string(size = plot_y_axis, fill = "gene_summary"),
shape = 21, alpha = 0.6) +
geom_text(aes(label = labels), size = 2) +
facet_grid(type ~ ., scales = "free", space = "free") +
theme_bw() +
theme(axis.title = element_text(size = 16), axis.text = element_text(size = 10, colour = "black"),
strip.text = element_blank(), strip.background = element_blank(),
axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title.x = element_blank(),
# axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.ticks = element_line(size = 0.5, colour = "black"), axis.line = element_line(size = 0.5),
legend.text = element_text(size = 12), legend.title = element_text(size = 12, face = "bold"),
legend.key = element_rect(colour = "transparent"), legend.key.size = unit(6, "mm"),
legend.spacing = unit(1, "mm"), legend.box.just = "left",
panel.grid = element_line(colour = "#999999", size = 0.1)) +
scale_fill_manual(values = colour_scale) +
guides(fill = guide_legend(title = "Genes present in bin", override.aes = list(size = 10)),
size = FALSE) +
# size = guide_legend(title = "Mapped assembled reads (%)")) +
xlab("Sample") +
scale_size_continuous(range = c(3,40), breaks = c(5, 10, 20, 40, 60)) +
ylab("Genome bin")
print(combined_bins_plot)
stats_table_combined
ggplot(stats_table_combined, aes_string(x = "metagenome", y = "plotting_name")) +
# geom_bar(aes_string(weight = plot_y_axis, fill = taxonomic_rank)) +
geom_point(aes_string(size = plot_y_axis, fill = "gene_summary"),
shape = 21, alpha = 0.6) +
geom_text(aes(label = labels), size = 2) +
facet_grid(type ~ ., scales = "free", space = "free") +
theme_bw() +
theme(axis.title = element_text(size = 16), axis.text = element_text(size = 10, colour = "black"),
strip.text = element_blank(), strip.background = element_blank(),
axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title.x = element_blank(),
# axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.ticks = element_line(size = 0.5, colour = "black"), axis.line = element_line(size = 0.5),
legend.text = element_text(size = 12), legend.title = element_text(size = 12, face = "bold"),
legend.key = element_rect(colour = "transparent"), legend.key.size = unit(6, "mm"),
legend.spacing = unit(1, "mm"), legend.box.just = "left",
panel.grid = element_line(colour = "#999999", size = 0.1)) +
scale_fill_manual(values = colour_scale) +
guides(fill = guide_legend(title = "Genes present in bin", override.aes = list(size = 10)),
size = FALSE) +
# size = guide_legend(title = "Mapped assembled reads (%)")) +
xlab("Sample") +
scale_size_continuous(range = c(3,40), breaks = c(5, 10, 20, 40, 60)) +
ylab("Genome bin")
stats_table_combined
stats_table_combined$gene_summary
colour_scale
rev(unique(stats_table_combined$plotting_name)
)
stats_table_combined$gene_summary
unique(stats_table_combined$gene_summary)
source('~/Research_General/PhD/04b_Metagenome_resequencing_F2015/10_ATLAS_re_analysis/09_env_abundance_of_bins/vs2_dRep_scripted/scripts/Chlorobi_cyc2_Fig3.R')
main(params)
# Print off tables for the user to be aware of
# colouring_info <- tibble::tibble(order = unique(dplyr::pull(stats_table_combined, order)), colour = colour_scale)
stats_table_combined_print <- unique(dplyr::select(stats_table_combined, domain, phylum, class,
order, family, genus, plotting_name, type, gene_summary))
# Load GTDB data and correct genome names
GTDB_stats_data <- load_and_process_GTDB_read_mapping_data(params$mapping_stats_filename, params$gtdb_filename,
genome_info_filename = params$dataset_info_bins_filename,
metagenome_info_filename = params$dataset_info_read_mapping_filename,
params$assembled_read_stats_filename,
params$drep_summary_filename)
# Add on MetAnnotate bin data for presence/absense of genes
GTDB_stats_data_list <- attach_read_mapping_and_gene_presence_absense_info(
metannotate_bin_filename = params$metannotate_bin_filename,
hmm_info_filename = params$hmm_info_bins_filename,
dataset_info_filename = params$dataset_info_bins_filename,
evalue_cutoff = params$evalue_cutoff_bins,
GTDB_stats_data = GTDB_stats_data)
GTDB_stats_data <- GTDB_stats_data_list$GTDB_stats_data
# # Load metannotate data
# metannotate_raw_read_data_normalized_list <- load_and_process_metannotate_raw_read_data(params$metannotate_raw_reads_filename,
#                                           params$hmm_info_raw_reads_filename, params$dataset_info_raw_reads_filename,
#                                           params$evalue_cutoff_raw_reads, params$taxon_raw_reads, params$raw_read_normalizing_HMM)
#
# # Raw read plot
# metannotate_raw_read_plot <- plot_metannotate_raw_read_data(metannotate_raw_read_data_normalized_list,
#                                                             colour_template_filename = "colours_vs2.tsv")
#
# Make the base plotting tables for the overall genus plot and gene-specific plot
overall_plotting_table <- make_overall_plotting_table(GTDB_stats_data_list, cutoff = 0.01,
rank_to_summarize = params$rank_to_summarize)
gene_plotting_table <- make_gene_plotting_table(GTDB_stats_data_list, cutoff = 0.001)
# Prepare for merging
overall_plotting_table$gene_summary <- "Not applicable"
# Change "type" of Chlorobi in gene plotting table to bring them into their own panel
gene_plotting_table$type <- unlist(lapply(1:nrow(gene_plotting_table), function(x) {
order <- dplyr::pull(gene_plotting_table, class)[x]
if (order == "Chlorobia") {
return("A_Chlorobia")
} else {
return("B_Other")
}
}))
### Make combined plot
# # Map the gene occurrance patterns of bins to their corresponding genus on the genus plot
# unique(dplyr::select(gene_plotting_table, family, genus, gene_summary))
stats_table_combined <- dplyr::bind_rows(overall_plotting_table, gene_plotting_table)
# Add more info for sorting in the plot
stats_table_combined$Lake <- unlist(lapply(1:nrow(stats_table_combined), function(x) {
if (grepl(pattern = "^L227", x = stats_table_combined$plotting_name[x])) {
return("L227")
} else if (grepl(pattern = "^L442", x = stats_table_combined$plotting_name[x])) {
return("L442")
} else if (grepl(pattern = "^L304", x = stats_table_combined$plotting_name[x])) {
return("L304")
} else {
return(NA)
}
}))
# stats_table_combined$gene_summary <- factor(stats_table_combined$gene_summary, levels =
#                                               c("cyc2 & dsrA & bchL", "cyc2 & bchL", "dsrA & bchL",
#                                                 "cyc2", "dsrA", "bchL", "Not applicable"),
#                                             ordered = TRUE)
stats_table_combined$gene_summary <- factor(stats_table_combined$gene_summary, levels =
c("cyc2 & dsrA", "cyc2", "dsrA", "Not applicable"),
ordered = TRUE)
# Sort meaningfully
stats_table_combined <- dplyr::arrange(stats_table_combined, gene_summary, domain, phylum, class, order, family, genus,
Lake, plotting_name)
# Now arrange the plotting name based on the above determined sort order
stats_table_combined$plotting_name <- factor(stats_table_combined$plotting_name,
levels = rev(unique(stats_table_combined$plotting_name)),
ordered = TRUE)
colour_scale <- choose_discrete_colour_scale(length(unique(stats_table_combined$gene_summary)))
# Make the last entry grey
colour_scale[length(colour_scale)] <- "#a6a6a6"
# Print off tables for the user to be aware of
# colouring_info <- tibble::tibble(order = unique(dplyr::pull(stats_table_combined, order)), colour = colour_scale)
stats_table_combined_print <- unique(dplyr::select(stats_table_combined, domain, phylum, class,
order, family, genus, plotting_name, type, gene_summary))
write.table(colouring_info, file = "order_colours_raw.tsv", sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(stats_table_combined_print, file = "plotting_name_arrangement_raw.tsv", sep = "\t", row.names = FALSE, col.names = TRUE)
plot_y_axis <- "percent_read_recruitment_assembled"
stats_table_combined$labels <- round(dplyr::pull(stats_table_combined, plot_y_axis), digits = 1)
combined_bins_plot <- ggplot(stats_table_combined, aes_string(x = "metagenome", y = "plotting_name")) +
# geom_bar(aes_string(weight = plot_y_axis, fill = taxonomic_rank)) +
geom_point(aes_string(size = plot_y_axis, fill = "gene_summary"),
shape = 21, alpha = 0.6) +
geom_text(aes(label = labels), size = 2) +
facet_grid(type ~ ., scales = "free", space = "free") +
theme_bw() +
theme(axis.title = element_text(size = 16), axis.text = element_text(size = 10, colour = "black"),
strip.text = element_blank(), strip.background = element_blank(),
axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title.x = element_blank(),
# axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.ticks = element_line(size = 0.5, colour = "black"), axis.line = element_line(size = 0.5),
legend.text = element_text(size = 12), legend.title = element_text(size = 12, face = "bold"),
legend.key = element_rect(colour = "transparent"), legend.key.size = unit(6, "mm"),
legend.spacing = unit(1, "mm"), legend.box.just = "left",
panel.grid = element_line(colour = "#999999", size = 0.1)) +
scale_fill_manual(values = colour_scale) +
guides(fill = guide_legend(title = "Genes present in bin", override.aes = list(size = 10)),
size = FALSE) +
# size = guide_legend(title = "Mapped assembled reads (%)")) +
xlab("Sample") +
scale_size_continuous(range = c(3,40), breaks = c(5, 10, 20, 40, 60)) +
ylab("Genome bin")
# print(combined_bins_plot)
# ggsave(file = "comb_plot_vs1.pdf", width = 350, height = 250, units = "mm")
### Bar plot of assembly stats
assembly_stats_table <- unique(dplyr::select(GTDB_stats_data, metagenome, metagenome_total_reads,mapped_assembled_reads))
assembly_stats_table$unassembled_reads <- assembly_stats_table$metagenome_total_reads - assembly_stats_table$mapped_assembled_reads
assembly_stats_table <- dplyr::select(assembly_stats_table, -metagenome_total_reads)
assembly_stats_table <- dplyr::rename(assembly_stats_table, mapped_reads = mapped_assembled_reads,
unmapped_reads = unassembled_reads)
assembly_stats_table <- tibble::as_tibble(reshape2::melt(assembly_stats_table, id.vars = "metagenome", variable.name = "count_type",
value.name = "read_count"))
assembly_stats_table_factors <- tibble::tibble(raw_name = c("mapped_reads", "unmapped_reads"),
plotting_name = c("Assembled", "Unassembled"))
assembly_stats_table$count_type <- as.character(assembly_stats_table$count_type)
assembly_stats_table$count_type <- plyr::mapvalues(assembly_stats_table$count_type,
from = assembly_stats_table_factors$raw_name,
to = assembly_stats_table_factors$plotting_name)
assembly_stats_table$count_type <- factor(assembly_stats_table$count_type,
levels = rev(assembly_stats_table_factors$plotting_name), ordered = TRUE)
assembly_stats_plot <- ggplot(assembly_stats_table, aes(x = metagenome)) +
geom_bar(aes(weight = read_count, fill = count_type)) +
scale_fill_manual(values = c("#a6a6a6", "#2857e4")) +
scale_y_continuous(labels = scales::comma) +
guides(fill = guide_legend(title = "Metagenomic reads")) +
theme_bw() +
theme(axis.title = element_text(size = 16), axis.text = element_text(size = 10, colour = "black"),
strip.text = element_text(size = 11, face = "italic"), strip.background = element_rect(fill = "#e6e6e6"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.ticks = element_line(size = 0.5, colour = "black"), axis.line = element_line(size = 0.5),
legend.text = element_text(size = 12), legend.title = element_text(size = 12, face = "bold"),
legend.key = element_rect(colour = "transparent"), legend.key.size = unit(6, "mm"),
legend.spacing = unit(1, "mm"), legend.box.just = "left",
panel.grid = element_blank()) +
xlab("Sample") +
ylab("Read count")
# print(assembly_stats_plot)
# For 'onefile', see https://stackoverflow.com/a/12483347 (accessed 181210)
egg::ggarrange(plots = list(combined_bins_plot, assembly_stats_plot), ncol = 1, heights = c(12,1))
# Print off tables for the user to be aware of
# colouring_info <- tibble::tibble(order = unique(dplyr::pull(stats_table_combined, order)), colour = colour_scale)
stats_table_combined_print <- unique(dplyr::select(stats_table_combined, domain, phylum, class,
order, family, genus, plotting_name, type, gene_summary))
stats_table_combined_print
write.table(stats_table_combined_print, file = "plotting_name_arrangement_raw.tsv", sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(stats_table_combined_print, file = "plotting_name_arrangement_raw.tsv", sep = "\t", row.names = FALSE, col.names = TRUE)
source('~/Research_General/PhD/04b_Metagenome_resequencing_F2015/10_ATLAS_re_analysis/09_env_abundance_of_bins/vs2_dRep_scripted/scripts/env_bin_abundance_analysis.R')
source('~/Research_General/PhD/04b_Metagenome_resequencing_F2015/10_ATLAS_re_analysis/09_env_abundance_of_bins/vs2_dRep_scripted/scripts/Chlorobi_cyc2_Fig3.R')
params$output_filepath <- "chlorobi_cyc2_fig3_vs2b.pdf"
main(params)
source('~/Research_General/PhD/04b_Metagenome_resequencing_F2015/10_ATLAS_re_analysis/09_env_abundance_of_bins/vs2_dRep_scripted/scripts/Chlorobi_cyc2_Fig3.R')
main(params)
match(x = rank_to_summarize, table = colnames(stats_table_summ))
### Overall taxonomy plot
make_overall_plotting_table <- function(GTDB_stats_data_list, cutoff = 0.01, rank_to_summarize = "family") {
GTDB_stats_data <- GTDB_stats_data_list$GTDB_stats_data
# Filter out low coverage genomes
cutoff <- cutoff * 100
GTDB_stats_data_filtered <- dplyr::filter(GTDB_stats_data, percent_read_recruitment_assembled >= cutoff)
flog.info(glue::glue("Filtering to ", cutoff, "% or higher abundance bins. Reduced from ",
length(unique(dplyr::pull(GTDB_stats_data, genome))), " to ",
length(unique(dplyr::pull(GTDB_stats_data_filtered, genome))), " bins."))
# HARD-CODED
tax_ranks <- c("domain", "phylum", "class", "order", "family", "genus", "species")
# Sum the stats -- unfortunately, standard deviation is lost here
group_by_vars <- c("metagenome", tax_ranks[1:match(x = rank_to_summarize, table = tax_ranks)])
stats_table_grp <- dplyr::group_by_at(GTDB_stats_data_filtered, group_by_vars)
stats_table_summ <- dplyr::summarise(stats_table_grp, coverage_mean = sum(coverage_mean, na.rm = TRUE),
rpkb = sum(rpkb, na.rm = TRUE), percent_read_recruitment =
sum(percent_read_recruitment, na.rm = TRUE), percent_read_recruitment_assembled =
sum(percent_read_recruitment_assembled, na.rm = TRUE))
# Calculate stats
pre_collapse <- count_unique_ranks(GTDB_stats_data_filtered, "genome")
post_collapse <- count_unique_ranks(stats_table_summ, rank_to_summarize)
flog.info(glue::glue("Summarized table to rank '", rank_to_summarize, "'. Collapsed from ",
pre_collapse, " genome bins to ", post_collapse, " taxonomic groups"))
if (rank_to_summarize == "genus") {
# Add family to genus name to make less ambiguous
stats_table_summ$plotting_name <- paste(stats_table_summ$genus, " (f__", stats_table_summ$family, ")", sep = "")
} else {
stats_table_summ$plotting_name <- dplyr::pull(stats_table_summ, rank_to_summarize)
# Quick and dirty method to clarify **most** "Unresolved" related issues
stats_table_summ$plotting_name <- unlist(lapply(1:nrow(stats_table_summ), function(x) {
plot_name <- dplyr::pull(stats_table_summ, plotting_name)[x]
if (plot_name == "Unresolved") {
# Find the next rank up
rank_colnum <- match(x = rank_to_summarize, table = colnames(stats_table_summ))
prev_rank <- dplyr::pull(stats_table_summ, rank_colnum - 1)[x]
new_name <- paste(plot_name, "_", prev_rank, sep = "")
if (new_name == "Unresolved_Unresolved") {
flog.warn(glue::glue("At least one of the plotting names is 'Unresolved_Unresolved'. If you have more
than one entry like this, your plot will not be accurate. Check the output table
to the user to see if this is the case."))
}
return(new_name)
} else {
return(x)
}
}))
}
# Save a simplified version to map more info onto later
stats_table_overall_plot <- dplyr::select(ungroup(stats_table_summ), metagenome,
tax_ranks[1:match(x = rank_to_summarize, table = tax_ranks)],
plotting_name, percent_read_recruitment_assembled)
stats_table_overall_plot$type <- "C_overall"
return(stats_table_overall_plot)
}
source('~/Research_General/PhD/04b_Metagenome_resequencing_F2015/10_ATLAS_re_analysis/09_env_abundance_of_bins/vs2_dRep_scripted/scripts/Chlorobi_cyc2_Fig3.R')
# Load GTDB data and correct genome names
GTDB_stats_data <- load_and_process_GTDB_read_mapping_data(params$mapping_stats_filename, params$gtdb_filename,
genome_info_filename = params$dataset_info_bins_filename,
metagenome_info_filename = params$dataset_info_read_mapping_filename,
params$assembled_read_stats_filename,
params$drep_summary_filename)
# Add on MetAnnotate bin data for presence/absense of genes
GTDB_stats_data_list <- attach_read_mapping_and_gene_presence_absense_info(
metannotate_bin_filename = params$metannotate_bin_filename,
hmm_info_filename = params$hmm_info_bins_filename,
dataset_info_filename = params$dataset_info_bins_filename,
evalue_cutoff = params$evalue_cutoff_bins,
GTDB_stats_data = GTDB_stats_data)
GTDB_stats_data <- GTDB_stats_data_list$GTDB_stats_data
make_overall_plotting_table(GTDB_stats_data_list, cutoff = 0.01,
rank_to_summarize = params$rank_to_summarize)
source('~/Research_General/PhD/04b_Metagenome_resequencing_F2015/10_ATLAS_re_analysis/09_env_abundance_of_bins/vs2_dRep_scripted/scripts/Chlorobi_cyc2_Fig3.R')
make_overall_plotting_table(GTDB_stats_data_list, cutoff = 0.01,
rank_to_summarize = params$rank_to_summarize)
make_overall_plotting_table(GTDB_stats_data_list, cutoff = 0.01,
rank_to_summarize = params$rank_to_summarize)$family
source('~/Research_General/PhD/04b_Metagenome_resequencing_F2015/10_ATLAS_re_analysis/09_env_abundance_of_bins/vs2_dRep_scripted/scripts/Chlorobi_cyc2_Fig3.R')
# Make the base plotting tables for the overall genus plot and gene-specific plot
overall_plotting_table <- make_overall_plotting_table(GTDB_stats_data_list, cutoff = 0.01,
rank_to_summarize = params$rank_to_summarize)
make_overall_plotting_table(GTDB_stats_data_list, cutoff = 0.01,
rank_to_summarize = params$rank_to_summarize)$plotting_name
source('~/Research_General/PhD/04b_Metagenome_resequencing_F2015/10_ATLAS_re_analysis/09_env_abundance_of_bins/vs2_dRep_scripted/scripts/Chlorobi_cyc2_Fig3.R')
main(params)
source('~/Research_General/PhD/04b_Metagenome_resequencing_F2015/10_ATLAS_re_analysis/09_env_abundance_of_bins/vs2_dRep_scripted/scripts/Chlorobi_cyc2_Fig3.R')
main(params)
# Load GTDB data and correct genome names
GTDB_stats_data <- load_and_process_GTDB_read_mapping_data(params$mapping_stats_filename, params$gtdb_filename,
genome_info_filename = params$dataset_info_bins_filename,
metagenome_info_filename = params$dataset_info_read_mapping_filename,
params$assembled_read_stats_filename,
params$drep_summary_filename)
# Add on MetAnnotate bin data for presence/absense of genes
GTDB_stats_data_list <- attach_read_mapping_and_gene_presence_absense_info(
metannotate_bin_filename = params$metannotate_bin_filename,
hmm_info_filename = params$hmm_info_bins_filename,
dataset_info_filename = params$dataset_info_bins_filename,
evalue_cutoff = params$evalue_cutoff_bins,
GTDB_stats_data = GTDB_stats_data)
GTDB_stats_data <- GTDB_stats_data_list$GTDB_stats_data
# # Load metannotate data
# metannotate_raw_read_data_normalized_list <- load_and_process_metannotate_raw_read_data(params$metannotate_raw_reads_filename,
#                                           params$hmm_info_raw_reads_filename, params$dataset_info_raw_reads_filename,
#                                           params$evalue_cutoff_raw_reads, params$taxon_raw_reads, params$raw_read_normalizing_HMM)
#
# # Raw read plot
# metannotate_raw_read_plot <- plot_metannotate_raw_read_data(metannotate_raw_read_data_normalized_list,
#                                                             colour_template_filename = "colours_vs2.tsv")
#
make_overall_plotting_table(GTDB_stats_data_list, cutoff = 0.01,
rank_to_summarize = params$rank_to_summarize)
make_gene_plotting_table(GTDB_stats_data_list, cutoff = 0.001)
source('~/Research_General/PhD/04b_Metagenome_resequencing_F2015/10_ATLAS_re_analysis/09_env_abundance_of_bins/vs2_dRep_scripted/scripts/Chlorobi_cyc2_Fig3.R')
# Load GTDB data and correct genome names
GTDB_stats_data <- load_and_process_GTDB_read_mapping_data(params$mapping_stats_filename, params$gtdb_filename,
genome_info_filename = params$dataset_info_bins_filename,
metagenome_info_filename = params$dataset_info_read_mapping_filename,
params$assembled_read_stats_filename,
params$drep_summary_filename)
# Add on MetAnnotate bin data for presence/absense of genes
GTDB_stats_data_list <- attach_read_mapping_and_gene_presence_absense_info(
metannotate_bin_filename = params$metannotate_bin_filename,
hmm_info_filename = params$hmm_info_bins_filename,
dataset_info_filename = params$dataset_info_bins_filename,
evalue_cutoff = params$evalue_cutoff_bins,
GTDB_stats_data = GTDB_stats_data)
GTDB_stats_data <- GTDB_stats_data_list$GTDB_stats_data
# # Load metannotate data
# metannotate_raw_read_data_normalized_list <- load_and_process_metannotate_raw_read_data(params$metannotate_raw_reads_filename,
#                                           params$hmm_info_raw_reads_filename, params$dataset_info_raw_reads_filename,
#                                           params$evalue_cutoff_raw_reads, params$taxon_raw_reads, params$raw_read_normalizing_HMM)
#
# # Raw read plot
# metannotate_raw_read_plot <- plot_metannotate_raw_read_data(metannotate_raw_read_data_normalized_list,
#                                                             colour_template_filename = "colours_vs2.tsv")
#
# Make the base plotting tables for the overall genus plot and gene-specific plot
overall_plotting_table <- make_overall_plotting_table(GTDB_stats_data_list, cutoff = 0.01,
rank_to_summarize = params$rank_to_summarize)
gene_plotting_table <- make_gene_plotting_table(GTDB_stats_data_list, cutoff = 0.001,
taxon_to_keep = params$taxon_to_keep,
taxon_keep_rank = params$taxon_keep_rank)
gene_plotting_table
overall_plotting_table
taxon_to_keep = "Chlorobia"
cutoff = 0.001
taxon_keep_rank = "class"
GTDB_stats_data <- GTDB_stats_data_list$GTDB_stats_data
# Filter out low coverage genomes
cutoff <- cutoff * 100
stats_table_genes <- dplyr::filter(GTDB_stats_data, percent_read_recruitment_assembled >= cutoff)
flog.info(glue::glue("Filtering to ", cutoff, "% or higher abundance bins. Reduced from ",
length(unique(dplyr::pull(GTDB_stats_data, genome))), " to ",
length(unique(dplyr::pull(stats_table_genes, genome))), " bins."))
# Add more info to bin names
checkm_summary <- paste(stats_table_genes$completeness, "/", stats_table_genes$contamination, "/",
stats_table_genes$strain_heterogeneity, sep = "")
taxonomy_summary <- paste("f__", stats_table_genes$family,
"; g__", stats_table_genes$genus, sep = "")
stats_table_genes$genome_long <- paste(stats_table_genes$genome, " (", checkm_summary,
"); ", taxonomy_summary, sep = "")
# Generate gene summary
genes_to_plot <- as.character(unique(dplyr::pull(GTDB_stats_data_list$gene_counts_long, gene)))
gene_info <- dplyr::select(stats_table_genes, genes_to_plot)
stats_table_genes$gene_summary <- unlist(lapply(1:nrow(gene_info), function(x) {
gene_row <- gene_info[x,]
gene_summ <- glue::glue_collapse(unlist(lapply(1:ncol(gene_row), function(y) {
if (is.na(dplyr::pull(gene_row, y)) == TRUE) {
flog.debug(glue::glue(x, ": no ", y))
} else {
return(colnames(gene_row)[y])
}
})), sep = " & ")
if (length(gene_summ) == 0) {
gene_summ <- "Not applicable"
}
return(gene_summ)
}))
stats_table_genes$gene_summary
dplyr::filter(stats_table_genes, gene_summary != "Not applicable" | taxon_to_keep %in% taxon_keep_rank)
dplyr::filter(stats_table_genes, gene_summary != "Not applicable" | taxon_to_keep %in% taxon_keep_rank)$gene_summary
dplyr::filter(stats_table_genes, taxon_to_keep %in% taxon_keep_rank)
stats_table_genes$class
taxon_to_keep
dplyr::filter(stats_table_genes, taxon_keep_rank %in% taxon_to_keep)
dplyr::filter(stats_table_genes, taxon_keep_rank == taxon_to_keep)
eval(taxon_keep_rank)
dplyr::filter(stats_table_genes, eval(taxon_keep_rank) == taxon_to_keep)
taxon_keep_rank
dplyr::filter(stats_table_genes, class == taxon_to_keep)
dplyr::filter_at(stats_table_genes, eval(taxon_keep_rank) == taxon_to_keep)
dplyr::filter_at(stats_table_genes, taxon_keep_rank == taxon_to_keep)
?UQ
UQ(taxon_keep_rank)
dplyr::filter(stats_table_genes, UQ(taxon_keep_rank) == taxon_to_keep)
!!(taxon_keep_rank)
taxon_keep_rank
!!taxon_keep_rank
dplyr::filter(stats_table_genes, !!taxon_keep_rank == taxon_to_keep)
dplyr::filter(stats_table_genes, !!(taxon_keep_rank) == taxon_to_keep)
dplyr::filter(stats_table_genes, !!(taxon_keep_rank) == UQ(taxon_to_keep))
taxon_keep_rank <- quo(taxon_keep_rank)
taxon_keep_rank
!!(taxon_keep_rank)
UQ(taxon_keep_rank)
quo(class)
taxon_keep_rank <- quo(class)
dplyr::filter(stats_table_genes, UQ(taxon_keep_rank) == taxon_to_keep)
quo("class")
dplyr::filter(stats_table_genes, UQ(taxon_keep_rank) == taxon_to_keep)
taxon_keep_rank <- "class"
dplyr::filter(stats_table_genes, UQ(quo(taxon_keep_rank)) == taxon_to_keep)
dplyr::filter(stats_table_genes, (!!rlang::sym(taxon_keep_rank)) == taxon_to_keep)
dplyr::filter(stats_table_genes, gene_summary != "Not applicable" | (!!rlang::sym(taxon_keep_rank)) == taxon_to_keep)
dplyr::filter(stats_table_genes, gene_summary != "Not applicable")
# Keep the requested taxon, BUT omit any other rows lacking all the genes
# for sym, see https://stackoverflow.com/a/24569597 subcomment (accessed 181211)
stats_table_genes <- dplyr::filter(stats_table_genes, gene_summary != "Not applicable" | (!!rlang::sym(taxon_keep_rank)) == taxon_to_keep)
# Make a simplified version for combining later
stats_table_genes_simple <- dplyr::select(ungroup(stats_table_genes), metagenome, domain, phylum, class, order,
family, genus, genome_long, percent_read_recruitment_assembled,
# genes_to_plot)
gene_summary)
stats_table_genes_simple <- dplyr::rename(stats_table_genes_simple, plotting_name = genome_long)
unlist(lapply(1:nrow(gene_plotting_table), function(x) {
rank_name <- dplyr::pull(gene_plotting_table, taxon_keep_rank)[x]
if (rank_name == taxon_to_keep) {
return("A_unique_taxon")
} else {
return("B_other")
}
}))
source('~/Research_General/PhD/04b_Metagenome_resequencing_F2015/10_ATLAS_re_analysis/09_env_abundance_of_bins/vs2_dRep_scripted/scripts/Chlorobi_cyc2_Fig3.R')
# Load GTDB data and correct genome names
GTDB_stats_data <- load_and_process_GTDB_read_mapping_data(params$mapping_stats_filename, params$gtdb_filename,
genome_info_filename = params$dataset_info_bins_filename,
metagenome_info_filename = params$dataset_info_read_mapping_filename,
params$assembled_read_stats_filename,
params$drep_summary_filename)
# Add on MetAnnotate bin data for presence/absense of genes
GTDB_stats_data_list <- attach_read_mapping_and_gene_presence_absense_info(
metannotate_bin_filename = params$metannotate_bin_filename,
hmm_info_filename = params$hmm_info_bins_filename,
dataset_info_filename = params$dataset_info_bins_filename,
evalue_cutoff = params$evalue_cutoff_bins,
GTDB_stats_data = GTDB_stats_data)
GTDB_stats_data <- GTDB_stats_data_list$GTDB_stats_data
# # Load metannotate data
# metannotate_raw_read_data_normalized_list <- load_and_process_metannotate_raw_read_data(params$metannotate_raw_reads_filename,
#                                           params$hmm_info_raw_reads_filename, params$dataset_info_raw_reads_filename,
#                                           params$evalue_cutoff_raw_reads, params$taxon_raw_reads, params$raw_read_normalizing_HMM)
#
# # Raw read plot
# metannotate_raw_read_plot <- plot_metannotate_raw_read_data(metannotate_raw_read_data_normalized_list,
#                                                             colour_template_filename = "colours_vs2.tsv")
#
# Make the base plotting tables for the overall genus plot and gene-specific plot
overall_plotting_table <- make_overall_plotting_table(GTDB_stats_data_list, cutoff = 0.01,
rank_to_summarize = params$rank_to_summarize)
make_gene_plotting_table(GTDB_stats_data_list, cutoff = 0.001,
taxon_to_keep = params$taxon_to_keep,
taxon_keep_rank = params$taxon_keep_rank)
source('~/Research_General/PhD/04b_Metagenome_resequencing_F2015/10_ATLAS_re_analysis/09_env_abundance_of_bins/vs2_dRep_scripted/scripts/Chlorobi_cyc2_Fig3.R')
source('~/Research_General/PhD/04b_Metagenome_resequencing_F2015/10_ATLAS_re_analysis/09_env_abundance_of_bins/vs2_dRep_scripted/scripts/Chlorobi_cyc2_Fig3.R')
# Load GTDB data and correct genome names
GTDB_stats_data <- load_and_process_GTDB_read_mapping_data(params$mapping_stats_filename, params$gtdb_filename,
genome_info_filename = params$dataset_info_bins_filename,
metagenome_info_filename = params$dataset_info_read_mapping_filename,
params$assembled_read_stats_filename,
params$drep_summary_filename)
# Add on MetAnnotate bin data for presence/absense of genes
GTDB_stats_data_list <- attach_read_mapping_and_gene_presence_absense_info(
metannotate_bin_filename = params$metannotate_bin_filename,
hmm_info_filename = params$hmm_info_bins_filename,
dataset_info_filename = params$dataset_info_bins_filename,
evalue_cutoff = params$evalue_cutoff_bins,
GTDB_stats_data = GTDB_stats_data)
GTDB_stats_data <- GTDB_stats_data_list$GTDB_stats_data
# Make the base plotting tables for the overall genus plot and gene-specific plot
overall_plotting_table <- make_overall_plotting_table(GTDB_stats_data_list, cutoff = 0.01,
rank_to_summarize = params$rank_to_summarize)
gene_plotting_table <- make_gene_plotting_table(GTDB_stats_data_list, cutoff = 0.001,
taxon_to_keep = params$taxon_to_keep,
taxon_keep_rank = params$taxon_keep_rank)
gene_plotting_table
source('~/Research_General/PhD/04b_Metagenome_resequencing_F2015/10_ATLAS_re_analysis/09_env_abundance_of_bins/vs2_dRep_scripted/scripts/Chlorobi_cyc2_Fig3.R')
main(params)
source('~/Research_General/PhD/04b_Metagenome_resequencing_F2015/10_ATLAS_re_analysis/09_env_abundance_of_bins/vs2_dRep_scripted/scripts/Chlorobi_cyc2_Fig3.R')
main(params)
source('~/Research_General/PhD/04b_Metagenome_resequencing_F2015/10_ATLAS_re_analysis/09_env_abundance_of_bins/vs2_dRep_scripted/scripts/Chlorobi_cyc2_Fig3.R')
main(params)
